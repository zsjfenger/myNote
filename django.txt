wsgi.py

  WSGI(Python Web Server Gateway Interface):Python 服务器网关接口
  Python 应用与Web服务器之间的接口

urls.py 
  
  URL配置文件
  Django项目中所有地址（页面）都需要我们自己去配置其URL

settings.py
  
  项目的总配置文件
  里面包含了数据库、Web应用、时间等各种配置

创建应用

  打开命令行，进入项目中manage.py同级目录
  命令行输入：python manage.py startapp blog
  添加应用名到settings.py中的INSTALLED_APPS里

应用目录介绍
  
   migrations  数据移植（迁移）模块
   admin.py  该应用的后台管理系统配置
   models.py 数据模块，使用ORM框架
   tests.py  自动化测试模块，django提供了自动化测试功能，在这里编写测试脚本（语句）
   views.py 执行响应的代码所在的模块，代码逻辑处理的主要地点，项目中大部分代码均在这里编写

   注意：不要忘记配置URL

创建一个页面响应

编辑blog.views
    每个响应对应一个函数，函数必须返回一个函数
    函数必须存在一个参数，一般约定为request
    每一个响应（函数）对应一个URL
编辑urls.py
    每个URL都以url的形式写出来
    url函数放在urlpatterns列表中
    url函数三个参数：URL（正则）、对应方法、名称

创建其他的urls文件，并在根urls文件中引用  如blog.urls
       
    1、在blog里面创建urls文件，并配置,同根目录配置类似，配置url习惯性加/ ，如有必要加上限制符
    2、在urlpatterns配置  url(r'^blog/', include('blog.urls'))
    注意：^$ 是正则表达式中的限制符

第二种URL配置
    包含其他URL
        1、在根urls.py中引入include
        2、在APP目录下创建urls.py文件，格式与根urls.py相同
        3、根urls.py中url函数的第二个参数改为include('blog.urls')
    注意：根urls.py针对APP配置的URL名称，是该APP所有URL的总路径
          配置URL时注意正则表达式结尾符号$和/

Templates
     HTML文件
     使用了django模板语言（Django Template Language， DTL）
     可以使用第三方模板（如Jinja2）

开发一个Template
     在APP的根目录下创建名叫Templates的目录
     在该目录下创建HTML文件
     在views.py中返回render()

DTL初步使用
     render()函数中支持一个dict类型参数
     该字典是后台传递到模板的参数，键为参数名
     在模板中使用{{参数名}}来直接使用

Django查找Template
     Django按照INSTALLED_APPS中的添加顺序查找Templates
     不同APP下Templates目录中的同名.html文件会造成冲突

     解决Templates冲突方案
         在APP的Templates目录下创建以APP名为名称的目录
         将html文件放入新创建的目录下

Django中的Models
     通常，一个Model对应数据库的一张数据表
     Django中Models以类的形式表现
     它包含了一些基本字段以及数据的一些行为
ORM
     对象关系映射（Object Telation Mapping）
     实现了对象和数据库之间的映射
     隐藏了数据访问的细节，不需要编写SQL语句
编写Models
     在应用根目录下创建models.py，并引入models模块
     创建类，继承models.Model，该类计时一张数据表
     在类中创建字段
         字段即类里面的属性（变量）
         如：attr = models.CharField(max_length=64)
         官方网站：https://docs.djangoproject.com/en/1.10/ref/models/fields
生成数据表
     命令行中进入manage.py同级目录  
     执行Python manage.py makemigrations  apps名（可选） 
     再执行python manage.py migrate

后台步骤
     views.py中import models
     acticle = models.Article.objects.get(pk=1)
     render(request, page, {'article': article})
前端步骤
     模板可直接使用对象以及对象的"."操作
     {{article.title}}

Admin
    Admin是Django自带的一个功能强大的自动化数据管理界面
    被授权的用户可直接在Admin中管理数据库
    Django提供了血多支队Admin的定制功能
配置Admin
    在应用下admin.py中引入自身模块models（或里面的模型类）
    编辑admin.py:admin.site.register(models.Article)
修改数据默认显示名称
    在Article类下添加一个方法
    根据Python版本选择__str__(self)或__unicode__(self)
    return self.title